#include <iostream>
using namespace std;

// Node class for AVL Tree
class Node {
public:
    int key;
    Node* left;
    Node* right;
    int height;

    Node(int key) {
        this->key = key;
        this->left = nullptr;
        this->right = nullptr;
        this->height = 1;
    }
};

// AVL Tree class
class AVLTree {
private:
    // Get height of the node
    int getHeight(Node* node) {
        return node ? node->height : 0;
    }

    // Get balance factor of the node
    int getBalance(Node* node) {
        return node ? getHeight(node->left) - getHeight(node->right) : 0;
    }

    // Perform a right rotation
    Node* rotateRight(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        // Perform rotation
        x->right = y;
        y->left = T2;

        // Update heights
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

        // Return new root
        return x;
    }

    // Perform a left rotation
    Node* rotateLeft(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        // Perform rotation
        y->left = x;
        x->right = T2;

        // Update heights
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        // Return new root
        return y;
    }

    // Insert a key into the AVL tree
    Node* insert(Node* node, int key) {
        // Perform normal BST insertion
        if (node == nullptr)
            return new Node(key);

        if (key < node->key)
            node->left = insert(node->left, key);
        else if (key > node->key)
            node->right = insert(node->right, key);
        else
            return node; // Duplicate keys not allowed

        // Update the height of the ancestor node
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));

        // Get the balance factor
        int balance = getBalance(node);

        // If the node is unbalanced, apply rotations

        // Left Left Case
        if (balance > 1 && key < node->left->key)
            return rotateRight(node);

        // Right Right Case
        if (balance < -1 && key > node->right->key)
            return rotateLeft(node);

        // Left Right Case
        if (balance > 1 && key > node->left->key) {
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }

        // Right Left Case
        if (balance < -1 && key < node->right->key) {
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }

        return node;
    }

    // Search for a key in the AVL tree
    Node* search(Node* node, int key) {
        if (node == nullptr || node->key == key)
            return node;

        if (key < node->key)
            return search(node->left, key);

        return search(node->right, key);
    }

    // In-order traversal to display the tree
    void inOrder(Node* node) {
        if (node != nullptr) {
            inOrder(node->left);
            cout << node->key << " ";
            inOrder(node->right);
        }
    }

public:
    Node* root;

    AVLTree() {
        root = nullptr;
    }

    // Public interface for insert
    void insert(int key) {
        root = insert(root, key);
        cout << "Inserted " << key << " into the AVL tree.\n";
    }

    // Public interface for search
    void search(int key) {
        Node* result = search(root, key);
        if (result != nullptr)
            cout << "Found " << key << " in the AVL tree.\n";
        else
            cout << key << " not found in the AVL tree.\n";
    }

    // Public interface for in-order traversal
    void display() {
        cout << "In-order traversal: ";
        inOrder(root);
        cout << endl;
    }
};

// Main function to demonstrate AVL Tree operations
int main() {
    AVLTree avl;

    // Insert elements into the AVL tree
    avl.insert(10);
    avl.insert(20);
    avl.insert(30);
    avl.insert(40);
    avl.insert(50);
    avl.insert(25);

    // Display the AVL tree
    avl.display();

    // Search for elements
    avl.search(20);
    avl.search(60);

    return 0;
}
